image: mjomaadocker/dev_php:latest
variables:

  DOCKER_HOST: tcp://docker:2375
  #
  # This instructs Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:20.10.16-dind
stages:
  - docker_build_dev
  - build
  - test
  - ECR_build_prod
  - deploy
docker_build_dev:
  image: docker:20.10.16
  stage: docker_build_dev
  script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD
    - docker build -t 977254184182.dkr.ecr.us-east-2.amazonaws.com/mjomaaphp:latest .
    - mkdir image
    - docker save mjomaadocker/dev_php:latest 977254184182.dkr.ecr.us-east-2.amazonaws.com/mjomaaphp:latest  > image/app.tar
    - docker tag 977254184182.dkr.ecr.us-east-2.amazonaws.com/mjomaaphp:latest  mjomaadocker/dev_php:latest 
    - docker push mjomaadocker/dev_php:latest 
  artifacts:
    paths:
      - image
composer:
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - vendor/
  script:     
      - composer update
      - cp .env.example .env
      - php artisan key:generate
  artifacts:
    expire_in: 1 month
    paths:
      - vendor/
      - .env
    exclude:
      - image  

phpunit:
  stage: test
  dependencies:
    - composer
  script:
    - phpunit --coverage-text --colors=never
  artifacts:
    exclude:
      - "*"

deploy:
  stage: ECR_build_prod
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  artifacts:
    paths:
      - image 
  script:
   - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
   - docker load -i image/app.tar
   - docker push 977254184182.dkr.ecr.us-east-2.amazonaws.com/mjomaaphp:new 
   - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl
   - chmod +x ./kubectl
   - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
   - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
   - kubectl version --short --client
   - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $AWS_K8_CLUSTER
   - TOKEN = aws ecr get-login-password --region $AWS_DEFAULT_REGION
   - kubectl delete secret -n $AWS_k8_namespace --ignore-not-found $AWS_K8_ECR_SECRET_NAME
   - kubectl create secret -n $AWS_k8_namespace docker-registry $AWS_K8_ECR_SECRET_NAME \
     --docker-server=$ECR_REPOSITORY \
     --docker-username=AWS \
     --docker-password=$TOKEN \
     --namespace=$AWS_k8_namespace
   

