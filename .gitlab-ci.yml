# the default image  for each step will be as below , unless you mention another one 
image: mjomaadocker/dev_php:latest

variables:
  DOCKER_HOST: tcp://docker:2375
  #
  # This instructs Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:20.10.16-dind

stages:
  - docker_build_dev
  - build
  - test
  - ECR_Push_prod
  - deploy

#------------------------------------------  
docker_build_dev:
  image: docker:20.10.16
  stage: docker_build_dev
  script:
    - docker login --username "${DOCKER_REGISTRY_USER}"" --password "${DOCKER_REGISTRY_PASSWORD}"
    - docker build -t ${AWS_ECR_REPOSITORY}:latest .
    - mkdir image
    - docker save ${AWS_ECR_REPOSITORY}:latest  > image/app.tar
    - docker tag ${AWS_ECR_REPOSITORY}:latest  mjomaadocker/dev_php:latest 
    - docker push mjomaadocker/dev_php:latest 
  artifacts:
    paths:
      - image

#------------------------------------------  

composer:
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - vendor/
  script: 
      - pwd    
      - composer update
      - cp .env.example .env
      - php artisan key:generate
  artifacts:
    expire_in: 1 month
    paths:
      - vendor/
      - .env
    exclude:
      - image  

#---------------------------------------------

phpunit:
  stage: test
  dependencies:
    - composer
  script:
    - phpunit --coverage-text --colors=never
  artifacts:
    exclude:
      - "*"

#------------------------------------------  




#
#
#      
ECR_Push_prod:
  stage: ECR_Push_prod
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  # in registry.gitlab.com/gitlab-org/cloud-deploy/aws-base you should  define 
  #  AWS_ACCESS_KEY_ID , AWS_DEFAULT_REGION, AWS_SECRET_ACCESS_KEY Variables in seetings--> CICD --> Variables
  artifacts:
    paths:
      - image
  script:
   - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY
   - docker load -i image/app.tar
   - aws ecr batch-delete-image --repository-name mjomaaphp --image-ids imageTag=latest --region $AWS_DEFAULT_REGION
   - docker push ${AWS_ECR_REPOSITORY}:latest  

#------------------------------------------  

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  artifacts:
    exclude:
      - "*"
  script:
   - export TOKEN=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)   
   - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl
   - chmod +x ./kubectl
   - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
   - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
   - kubectl version --short --client
   - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $AWS_K8_CLUSTER_NAME
   - kubectl apply -f EKS_K8/laravel_namespace.yaml
   - kubectl delete secret  $AWS_K8_ECR_SECRET_NAME -n $AWS_k8_namespace || true
   - kubectl create secret docker-registry $AWS_K8_ECR_SECRET_NAME --docker-server=$AWS_ECR_REPOSITORY --docker-username=AWS --docker-password=$TOKEN -n $AWS_k8_namespace  || true
   - echo $TOKEN 
   - kubectl apply -f EKS_K8/deployment.yaml -n $AWS_k8_namespace 
   - kubectl apply -f EKS_K8/service.yaml   -n $AWS_k8_namespace 
   - kubectl rollout restart laravel -n $AWS_k8_namespace 

#------------------------------------------  
